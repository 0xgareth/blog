{"version":3,"sources":["webpack:///./src/pages/posts-by-date.js"],"names":["BlogIndex","data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","tags","forEach","post","_","node","frontmatter","concat","filter","elem","pos","arr","indexOf","style","display","flexWrap","justifyContent","listStyle","padding","marginBottom","boxShadow","to","map","tag","path","toLowerCase","fields","slug","key","date","role","aria-label","minread","pageQuery"],"mappings":"2FAAA,oIAwEeA,UAjEG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,EAAYF,EAAKG,KAAKC,aAAaC,MACnCC,EAAQN,EAAKO,kBAAkBC,MAEjCC,EAAO,GACXH,EAAMI,SAAQ,SAACC,EAAMC,GACfD,EAAKE,KAAKC,YAAYL,OACxBA,EAAOA,EAAKM,OAAOJ,EAAKE,KAAKC,YAAYL,UAY7C,OAFAA,EAAiBA,EALDO,QAAO,SAACC,EAAMC,EAAKC,GAC/B,OAAOA,EAAIC,QAAQH,KAAUC,KAO/B,kBAAC,IAAD,CAAQjB,SAAUA,EAAUI,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAM,cACX,kBAAC,IAAD,CAAKJ,SAAUA,IAGf,yBACEoB,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,EACTC,aAAc,QAEhB,kBAAC,OAAD,CAAMN,MAAO,CAAEO,UAAU,QAAWC,GAAI,UAAxC,qBAGCpB,EAAKqB,KAAI,SAAAC,GACR,IAAMC,EAAOD,EAAIE,cACjB,OACE,kBAAC,OAAD,CAAMZ,MAAO,CAAEO,UAAU,QAAWC,GAAE,SAAWG,GAC/CD,OAKR,6CACA,4BAECzB,EAAMwB,KAAI,YAAe,IAAZjB,EAAW,EAAXA,KACNR,EAAQQ,EAAKC,YAAYT,OAASQ,EAAKqB,OAAOC,KAC9CA,EAAOtB,EAAKqB,OAAOC,KACzB,OACE,wBAAIC,IAAKD,GACP,kBAAC,OAAD,CAAMN,GAAIM,GAAO9B,GACjB,6BACA,+BAAQQ,EAAKC,YAAYuB,KAAzB,MAAiC,0BAAMC,KAAK,MAAMC,aAAW,UAA5B,KAAjC,IAAgF1B,EAAKC,YAAY0B,QAAjG,oBAWL,IAAMC,EAAS","file":"component---src-pages-posts-by-date-js-bd364550c3fc44d38204.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport Bio from \"../components/bio\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n\n  let tags = []\n  posts.forEach((post, _) => {\n    if (post.node.frontmatter.tags) {\n      tags = tags.concat(post.node.frontmatter.tags)\n    }\n  })\n\n  const getUnique = arrArg => {\n    return arrArg.filter((elem, pos, arr) => {\n      return arr.indexOf(elem) === pos\n    })\n  }\n\n  tags = getUnique(tags)\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <Bio location={location}/>\n\n      {/* links */}\n      <div \n        style={{ \n          display: `flex`,\n          flexWrap: `wrap`,\n          justifyContent: `space-between`,\n          listStyle: `none`,\n          padding: 0,\n          marginBottom: '3em'\n        }}>\n        <Link style={{ boxShadow: `none` }} to={'/posts'}>\n         Posts by category\n        </Link>\n        {tags.map(tag => {\n          const path = tag.toLowerCase()\n          return( \n            <Link style={{ boxShadow: `none` }} to={`/tags/${path}`}>\n             {tag}\n            </Link>\n          )\n        })}\n      </div>\n      <h3>Posts by date</h3>\n      <ul>\n      {/* posts */}\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        const slug = node.fields.slug\n        return (\n          <li key={slug}>\n            <Link to={slug}>{title}</Link>\n            <br/>\n            <small>{node.frontmatter.date} • <span role=\"img\" aria-label=\"coffee\">☕</span> {node.frontmatter.minread} min read</small>\n          </li>\n        )\n      })}\n      </ul>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            minread\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}