{"version":3,"sources":["webpack:///./src/templates/genres.js"],"names":["Tags","pageContext","data","location","genre","edges","allMarkdownRemark","siteTitle","site","siteMetadata","title","genreHeader","formattedHeader","slice","toUpperCase","length","style","display","flexWrap","justifyContent","listStyle","padding","marginBottom","boxShadow","to","map","node","slug","fields","frontmatter","key","date","minread","role","aria-label","pageQuery"],"mappings":"4FAAA,8GAkDeA,UA7CF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACzBC,EAAUH,EAAVG,MACAC,EAAUH,EAAKI,kBAAfD,MACFE,EAAYL,EAAKM,KAAKC,aAAaC,MACnCC,EAAW,GAAMP,EACjBQ,EAAkBD,EAAYE,MAAM,EAAE,GAAGC,cAAgBH,EAAYE,MAAM,EAAGF,EAAYI,QAEhG,OACE,kBAAC,IAAD,CAAQZ,SAAUA,EAAUO,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAOE,IACZ,4BAAKA,GAGL,yBACEI,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,MAEX,uBAAGL,MAAO,CAACM,aAAa,QAAxB,IACE,kBAAC,OAAD,CAAMN,MAAO,CAAEO,UAAU,QAAWC,GAAI,UAAxC,WAMJ,4BACGnB,EAAMoB,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACAjB,EAAUgB,EAAKG,YAAfnB,MACR,OACE,wBAAIoB,IAAKH,GACP,kBAAC,OAAD,CAAMH,GAAIG,GAAOjB,GACjB,6BACA,+BAAQgB,EAAKG,YAAYE,KAAzB,MAAkCL,EAAKG,YAAYG,QAAnD,aAAqE,0BAAMC,KAAK,MAAMC,aAAW,UAA5B,KAArE,YAWP,IAAMC,EAAS","file":"component---src-templates-genres-js-6b5a0e4165bc5c46888e.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst Tags = ({ pageContext, data, location }) => {\n  const { genre } = pageContext\n  const { edges } = data.allMarkdownRemark\n  const siteTitle = data.site.siteMetadata.title\n  const genreHeader = `${genre}`\n  const formattedHeader = genreHeader.slice(0,1).toUpperCase() + genreHeader.slice(1, genreHeader.length)\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={formattedHeader} />\n      <h3>{formattedHeader}</h3>\n\n      {/* links */}\n      <div \n        style={{ \n          display: `flex`,\n          flexWrap: `wrap`,\n          justifyContent: `space-between`,\n          listStyle: `none`,\n          padding: '0',\n        }}>\n        <p style={{marginBottom:'2em'}}>← \n          <Link style={{ boxShadow: `none` }} to={'/books'}>\n          Books\n          </Link>\n        </p>\n      </div>\n\n      <ul>\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <ol key={slug}>\n              <Link to={slug}>{title}</Link>\n              <br/>\n              <small>{node.frontmatter.date} • {node.frontmatter.minread} min read <span role=\"img\" aria-label=\"coffee\">☕</span> </small>\n            </ol>\n          )\n        })}\n      </ul>\n    </Layout>\n  )\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($genre: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { genre: { in: [$genre] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            minread\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}