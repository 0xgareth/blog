{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es7.object.entries.js","webpack:///./src/pages/posts.js","webpack:///./node_modules/core-js/modules/_object-to-array.js"],"names":["$export","$entries","S","entries","it","Posts","data","location","tagPostData","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","tags","forEach","post","_","node","frontmatter","concat","filter","elem","pos","arr","indexOf","tag","res","includes","push","getPostsWithTag","style","display","flexWrap","justifyContent","listStyle","padding","marginBottom","to","Object","map","key","value","formattedHeader","slice","toUpperCase","length","fields","slug","date","minread","role","aria-label","pageQuery","DESCRIPTORS","getKeys","toIObject","isEnum","f","module","exports","isEntries","O","keys","i","result","call"],"mappings":"gFACA,IAAIA,EAAU,EAAQ,QAClBC,EAAW,EAAQ,OAAR,EAA8B,GAE7CD,EAAQA,EAAQE,EAAG,SAAU,CAC3BC,QAAS,SAAiBC,GACxB,OAAOH,EAASG,O,sNCgHLC,UA/GD,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACjBC,EAAc,GACZC,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAYP,EAAKQ,kBAAkBC,MAGrCC,EAAO,GACXH,EAAMI,SAAQ,SAACC,EAAMC,GACfD,EAAKE,KAAKC,YAAYL,OACxBA,EAAOA,EAAKM,OAAOJ,EAAKE,KAAKC,YAAYL,UAU7CA,EAAiBA,EALDO,QAAO,SAACC,EAAMC,EAAKC,GAC/B,OAAOA,EAAIC,QAAQH,KAAUC,KAqBjC,OAJAT,EAAKC,SAAQ,SAAAW,GACXpB,EAAYoB,GAZU,SAACf,EAAOe,GAC9B,IAAIC,EAAM,GAMV,OALAhB,EAAMI,SAAQ,SAACC,EAAMC,GACfD,EAAKE,KAAKC,YAAYL,KAAKc,SAASF,IACtCC,EAAIE,KAAKb,MAGNW,EAKYG,CAAgBnB,EAAOe,MAI1C,kBAAC,IAAD,CAAQrB,SAAUA,EAAUK,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAM,UACX,yBAAKqB,MAAO,IACV,sCAGF,yBACEA,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAEX,uBAAGL,MAAO,CAACM,aAAa,QAAxB,IACE,kBAAC,OAAD,CAAMN,MAAO,GAAMO,GAAI,kBAAvB,mBAMJ,yBAAKP,MAAO,IACV,uCAIF,uBAAGA,MAAO,CAACM,aAAa,QAAxB,IACI,kBAAC,OAAD,CAAMN,MAAO,GAAMO,GAAI,qBAAvB,gBAIJ,uBAAGP,MAAO,CAACM,aAAa,QAAxB,IACI,kBAAC,OAAD,CAAMN,MAAO,GAAMO,GAAI,oBAAvB,eAIJ,uBAAGP,MAAO,CAACM,aAAa,QAAxB,IACI,kBAAC,OAAD,CAAMN,MAAO,GAAMO,GAAI,iBAAvB,YAKJ,4BAECC,OAAOtC,QAAQK,GAAakC,KAAI,YAAkB,IAAhBC,EAAe,KAAVC,EAAU,KAC1CC,EAAkBF,EAAIG,MAAM,EAAE,GAAGC,cAAgBJ,EAAIG,MAAM,EAAGH,EAAIK,QAClEnC,EAAQ+B,EAAMF,KAAI,YAAe,IAAZtB,EAAW,EAAXA,KACnBR,EAAQQ,EAAKC,YAAYT,OAASQ,EAAK6B,OAAOC,KAC9CA,EAAQ9B,EAAK6B,OAAOC,KAE1B,OACE,wBAAIP,IAAKO,GACP,kBAAC,OAAD,CAAMV,GAAIU,GAAOtC,GACjB,6BACA,+BAAQQ,EAAKC,YAAY8B,KAAzB,MAAkC/B,EAAKC,YAAY+B,QAAnD,aAAqE,0BAAMC,KAAK,MAAMC,aAAW,UAA5B,KAArE,SAIJ,OACE,6BACE,wBACErB,MAAO,IAENY,GAEFhC,SAWR,IAAM0C,EAAS,a,qBCxHtB,IAAIC,EAAc,EAAQ,QACtBC,EAAU,EAAQ,QAClBC,EAAY,EAAQ,QACpBC,EAAS,EAAQ,QAAiBC,EACtCC,EAAOC,QAAU,SAAUC,GACzB,OAAO,SAAU3D,GAOf,IANA,IAKIuC,EALAqB,EAAIN,EAAUtD,GACd6D,EAAOR,EAAQO,GACfhB,EAASiB,EAAKjB,OACdkB,EAAI,EACJC,EAAS,GAENnB,EAASkB,GACdvB,EAAMsB,EAAKC,KACNV,IAAeG,EAAOS,KAAKJ,EAAGrB,IACjCwB,EAAOpC,KAAKgC,EAAY,CAACpB,EAAKqB,EAAErB,IAAQqB,EAAErB,IAG9C,OAAOwB","file":"component---src-pages-posts-js-446875d8d51abb07eb31.js","sourcesContent":["// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $entries = require('./_object-to-array')(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it) {\n    return $entries(it);\n  }\n});\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\nconst Posts = ({ data, location }) => {\n  let tagPostData = {}\n  const siteTitle = data.site.siteMetadata.title\n  const posts     = data.allMarkdownRemark.edges\n  \n  // get all unique tags from each post\n  let tags = []\n  posts.forEach((post, _) => {\n    if (post.node.frontmatter.tags) {\n      tags = tags.concat(post.node.frontmatter.tags)\n    }\n  })\n\n  const getUnique = arrArg => {\n    return arrArg.filter((elem, pos, arr) => {\n      return arr.indexOf(elem) === pos\n    })\n  }\n\n  tags = getUnique(tags)\n\n  const getPostsWithTag = (posts, tag) => {\n    let res = []\n    posts.forEach((post, _)=> {\n      if (post.node.frontmatter.tags.includes(tag)) {\n        res.push(post)\n      }\n    })\n    return res;\n  }\n\n  // build a data structure to hold tags : posts\n  tags.forEach(tag => {\n    tagPostData[tag] = getPostsWithTag(posts, tag);\n  })\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"Index\" />\n      <div style={{  }}>\n        <h3>Notes</h3>\n      </div>\n\n      <div \n        style={{ \n          display: `flex`,\n          flexWrap: `wrap`,\n          justifyContent: `space-between`,\n          listStyle: `none`,\n          padding: 0,\n        }}>\n        <p style={{marginBottom:'0em'}}>→ \n          <Link style={{  }} to={'/posts-by-date'}>\n          Notes by date\n          </Link>\n        </p>\n      </div>\n      \n      <div style={{  }}>\n        <h3>Topics</h3>\n      </div>\n\n      {/* links */}\n      <p style={{marginBottom:'0em'}}>→ \n          <Link style={{  }} to={'/tags/programming'}>\n          programming\n          </Link>\n      </p>\n      <p style={{marginBottom:'0em'}}>→ \n          <Link style={{  }} to={'/tags/technology'}>\n          technology\n          </Link>\n      </p>\n      <p style={{marginBottom:'0em'}}>→ \n          <Link style={{  }} to={'/tags/reading'}>\n          reading\n          </Link>\n      </p>\n\n      <ul>\n      {/* posts */}\n      {Object.entries(tagPostData).map(([key, value]) =>{\n        const formattedHeader = key.slice(0,1).toUpperCase() + key.slice(1, key.length)\n        const posts = value.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          const slug =  node.fields.slug\n          \n          return (\n            <ol key={slug}>\n              <Link to={slug}>{title}</Link>\n              <br/>\n              <small>{node.frontmatter.date} • {node.frontmatter.minread} min read <span role=\"img\" aria-label=\"coffee\">☕</span> </small>\n            </ol>\n          )\n          })\n          return (\n            <div>\n              <h3\n                style={{}}\n              >\n                {formattedHeader}\n              </h3>\n              {posts}\n            </div>\n          )\n      })}\n      </ul>\n    </Layout>\n  )\n}\n  \nexport default Posts\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { type: { in: [\"blog\"] } } }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n            minread\n          }\n        }\n      }\n    }\n  }\n`\n","var DESCRIPTORS = require('./_descriptors');\nvar getKeys = require('./_object-keys');\nvar toIObject = require('./_to-iobject');\nvar isEnum = require('./_object-pie').f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || isEnum.call(O, key)) {\n        result.push(isEntries ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n"],"sourceRoot":""}