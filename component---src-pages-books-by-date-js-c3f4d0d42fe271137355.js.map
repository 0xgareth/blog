{"version":3,"sources":["webpack:///./src/pages/books-by-date.js"],"names":["PostsByDate","data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","tags","forEach","post","_","node","frontmatter","concat","filter","elem","pos","arr","indexOf","style","boxShadow","to","map","slug","fields","key","date","minread","role","aria-label","rating","pageQuery"],"mappings":"2FAAA,wHAqEeA,UA9DK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACrBC,EAAYF,EAAKG,KAAKC,aAAaC,MACnCC,EAAQN,EAAKO,kBAAkBC,MAGjCC,EAAO,GACXH,EAAMI,SAAQ,SAACC,EAAMC,GACfD,EAAKE,KAAKC,YAAYL,OACxBA,EAAOA,EAAKM,OAAOJ,EAAKE,KAAKC,YAAYL,UAY7C,OAFAA,EAAiBA,EALDO,QAAO,SAACC,EAAMC,EAAKC,GAC/B,OAAOA,EAAIC,QAAQH,KAAUC,KAO/B,kBAAC,IAAD,CAAQjB,SAAUA,EAAUI,MAAOH,GAC/B,kBAAC,IAAD,CAAKG,MAAM,UACX,yBAAKgB,MAAO,IACR,sCAEJ,2BACA,kBAAC,OAAD,CAAMA,MAAO,CAAEC,UAAU,QAAWC,GAAI,UAAxC,qBAEA,2BACA,kBAAC,OAAD,CAAMF,MAAO,CAAEC,UAAU,QAAWC,GAAI,kBAAxC,cAGA,uNAIA,6IAQA,4BACCjB,EAAMkB,KAAI,YAAe,IAAZX,EAAW,EAAXA,KACJY,EAASZ,EAAKa,OAAdD,KACApB,EAAUQ,EAAKC,YAAfT,MACR,OACE,wBAAIsB,IAAKF,GACP,kBAAC,OAAD,CAAMF,GAAIE,GAAOpB,GACjB,6BACJ,+BAAQQ,EAAKC,YAAYc,KAAzB,MAAkCf,EAAKC,YAAYe,QAAnD,aAAqE,0BAAMC,KAAK,MAAMC,aAAW,UAA5B,KAArE,MAAsHlB,EAAKC,YAAYkB,OAAvI,cAWH,IAAMC,EAAS","file":"component---src-pages-books-by-date-js-c3f4d0d42fe271137355.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\nconst PostsByDate = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n\n  // get all unique tags from each post\n  let tags = []\n  posts.forEach((post, _) => {\n    if (post.node.frontmatter.tags) {\n      tags = tags.concat(post.node.frontmatter.tags)\n    }\n  })\n\n  const getUnique = arrArg => {\n    return arrArg.filter((elem, pos, arr) => {\n      return arr.indexOf(elem) === pos\n    })\n  }\n\n  tags = getUnique(tags)\n\n  return (\n    <Layout location={location} title={siteTitle}>\n        <SEO title=\"Index\" />\n        <div style={{  }}>\n            <h3>Books</h3>\n        </div>\n        <p>\n        <Link style={{ boxShadow: `none` }} to={'/books'}>> Sort by rating</Link>\n        </p>\n        <p>\n        <Link style={{ boxShadow: `none` }} to={'/genre/fiction'}>→ Fiction</Link>\n        </p>\n\n        <p>\n        This page shares notes i've taken from some of the more recent books i've read. Similar to Derek Sivers i've given each a rating out of 10 on how likely I am to recommend it to others.\n        </p>\n\n        <p>\n        Below the notes are sorted by their ratings in descending order. You may sort by date read, or by genre above.\n        </p>\n\n\n\n\n\n        <ul>\n        {posts.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <ol key={slug}>\n              <Link to={slug}>{title}</Link>\n              <br/>\n          <small>{node.frontmatter.date} • {node.frontmatter.minread} min read <span role=\"img\" aria-label=\"coffee\">☕</span> • {node.frontmatter.rating}/10</small>\n            </ol>\n          )\n        })}\n      </ul>\n    </Layout>\n  )\n}\n  \nexport default PostsByDate\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { type: { in: [\"book\"] } } }\n      ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n            minread\n            rating\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}