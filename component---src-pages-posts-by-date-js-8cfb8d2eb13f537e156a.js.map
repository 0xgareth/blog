{"version":3,"sources":["webpack:///./src/pages/posts-by-date.js"],"names":["PostsByDate","data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","tags","forEach","post","_","node","frontmatter","concat","filter","elem","pos","arr","indexOf","style","display","flexWrap","justifyContent","listStyle","padding","marginBottom","boxShadow","to","map","slug","fields","key","date","minread","role","aria-label","pageQuery"],"mappings":"2FAAA,wHAmEeA,UA5DK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACrBC,EAAYF,EAAKG,KAAKC,aAAaC,MACnCC,EAAQN,EAAKO,kBAAkBC,MAGjCC,EAAO,GACXH,EAAMI,SAAQ,SAACC,EAAMC,GACfD,EAAKE,KAAKC,YAAYL,OACxBA,EAAOA,EAAKM,OAAOJ,EAAKE,KAAKC,YAAYL,UAY7C,OAFAA,EAAiBA,EALDO,QAAO,SAACC,EAAMC,EAAKC,GAC/B,OAAOA,EAAIC,QAAQH,KAAUC,KAO/B,kBAAC,IAAD,CAAQjB,SAAUA,EAAUI,MAAOH,GAC/B,kBAAC,IAAD,CAAKG,MAAM,UACX,yBAAKgB,MAAO,IACR,8CAIJ,yBACEA,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,MAEX,uBAAGL,MAAO,CAACM,aAAa,QAAxB,IACE,kBAAC,OAAD,CAAMN,MAAO,CAAEO,UAAU,QAAWC,GAAI,UAAxC,WAMJ,4BACCvB,EAAMwB,KAAI,YAAe,IAAZjB,EAAW,EAAXA,KACJkB,EAASlB,EAAKmB,OAAdD,KACA1B,EAAUQ,EAAKC,YAAfT,MACR,OACE,wBAAI4B,IAAKF,GACP,kBAAC,OAAD,CAAMF,GAAIE,GAAO1B,GACjB,6BACA,+BAAQQ,EAAKC,YAAYoB,KAAzB,MAAkCrB,EAAKC,YAAYqB,QAAnD,aAAqE,0BAAMC,KAAK,MAAMC,aAAW,UAA5B,aAW5E,IAAMC,EAAS","file":"component---src-pages-posts-by-date-js-8cfb8d2eb13f537e156a.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\nconst PostsByDate = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n\n  // get all unique tags from each post\n  let tags = []\n  posts.forEach((post, _) => {\n    if (post.node.frontmatter.tags) {\n      tags = tags.concat(post.node.frontmatter.tags)\n    }\n  })\n\n  const getUnique = arrArg => {\n    return arrArg.filter((elem, pos, arr) => {\n      return arr.indexOf(elem) === pos\n    })\n  }\n\n  tags = getUnique(tags)\n\n  return (\n    <Layout location={location} title={siteTitle}>\n        <SEO title=\"Index\" />\n        <div style={{  }}>\n            <h3>Notes by date</h3>\n        </div>\n\n        {/* links */}\n        <div \n          style={{ \n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: '0',\n          }}>\n          <p style={{marginBottom:'2em'}}>← \n            <Link style={{ boxShadow: `none` }} to={'/posts'}>\n            Notes\n            </Link>\n          </p>\n        </div>\n\n        <ul>\n        {posts.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <ol key={slug}>\n              <Link to={slug}>{title}</Link>\n              <br/>\n              <small>{node.frontmatter.date} • {node.frontmatter.minread} min read <span role=\"img\" aria-label=\"coffee\">☕</span></small>\n            </ol>\n          )\n        })}\n      </ul>\n    </Layout>\n  )\n}\n  \nexport default PostsByDate\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { type: { in: [\"blog\"] } } }\n      ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n            minread\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}